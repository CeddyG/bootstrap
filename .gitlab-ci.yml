# image: node:4.2.2

composer:
    image: composer:latest
    stage: build
    script:
        - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
        - cp .env.example .env
        - php artisan key:generate
        
    artifacts:
        # Define what to output from the job.
        paths:
            - vendor/
            - .env
        
    cache:
        # The variable CI_COMMIT_REF_SLUG 
        # refers to the slug of the branch.
        # For example: `master` for the master branch.
        # We use the `composer` suffix to avoid conflicts with
        # the `npm` cache that we'll define next.
        key: ${CI_COMMIT_REF_SLUG}-composer

        # Define what to cache.
        paths:
            - vendor/
          
npm:
    image: node:latest
    # Same stage as `composer` so that they run in parallel.
    stage: build

    # Cache the `node_modules` folder
    # using the `npm` suffix on the key.
    cache:
        key: ${CI_COMMIT_REF_SLUG}-npm
        paths:
            - node_modules/

    # Install and compile.
    script:
        - npm install
        - npm run production

    # Provide the other jobs of the pipeline with
    # the node dependencies and the compiled assets.
    artifacts:
        paths:
            - node_modules/
            - public/
            
phpunit:
    image: composer:latest
    stage: test

    # List of jobs from which it will download the artifacts.
    dependencies:
        - composer

    script:
        - ./vendor/bin/phpunit --coverage-text --colors=never

# Add a `.` in front of a job to make it hidden.
# Add a `&reference` to make it a reusable template.
# Note that we don't have dashes anymore.
.init_ssh: &init_ssh |
    eval $(ssh-agent -s)
    echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  
staging:
    stage: deploy
    
    # List of jobs from which it will download the artifacts.
    dependencies:
        - composer
        - npm
  
    # Pseudocode describing roughly what we're trying to achive
    script:
        # Reuse a template by calling `*reference`
        - *init_ssh
        - ssh ceddy@192.168.56.4 "git clone ssh://git@gitlab.dock:2222/clara/bootstrap.git bootstrap/staging && mkdir bootstrap/staging/vendor"
        - scp -r public/* ceddy@192.168.56.4:bootstrap/staging/public
        - scp -r vendor/* ceddy@192.168.56.4:bootstrap/staging/vendor
        - ssh ceddy@192.168.56.4 "cd bootstrap/staging/laradock && cp .env.example .env && docker compose -p staging.bootstrap up -d nginx mysql phpmyadmin"
        - ssh ceddy@192.168.56.4 "cd bootstrap/staging && cp .env.example .env"
        - ssh ceddy@192.168.56.4 "docker exec -it staging-bootstrap-workspace-1 php artisan key:generate"

    # Define an GitLab environment.
    # This makes GitLab aware of your latest deployments
    # and provides a button to check out the provided url.
    environment:
        name: staging
        url: http://staging.bootstrap.dock
    
    # (Optional) Only deploy if we're in the master branch
    # Other branches will only build and test.
    only:
        - master